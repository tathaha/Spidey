/*
 * This file is generated by jOOQ.
 */
package dev.mlnr.spidey.jooq.tables.records;


import dev.mlnr.spidey.jooq.tables.SettingsMusic;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SettingsMusicRecord extends UpdatableRecordImpl<SettingsMusicRecord> implements Record6<Long, Long, Boolean, Integer, Boolean, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.settings_music.guild_id</code>.
     */
    public SettingsMusicRecord setGuildId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.settings_music.dj_role_id</code>.
     */
    public SettingsMusicRecord setDjRoleId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.dj_role_id</code>.
     */
    public Long getDjRoleId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.settings_music.segment_skipping_enabled</code>.
     */
    public SettingsMusicRecord setSegmentSkippingEnabled(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.segment_skipping_enabled</code>.
     */
    public Boolean getSegmentSkippingEnabled() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.settings_music.default_volume</code>.
     */
    public SettingsMusicRecord setDefaultVolume(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.default_volume</code>.
     */
    public Integer getDefaultVolume() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.settings_music.fair_queue_enabled</code>.
     */
    public SettingsMusicRecord setFairQueueEnabled(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.fair_queue_enabled</code>.
     */
    public Boolean getFairQueueEnabled() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.settings_music.fair_queue_threshold</code>.
     */
    public SettingsMusicRecord setFairQueueThreshold(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.settings_music.fair_queue_threshold</code>.
     */
    public Integer getFairQueueThreshold() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Boolean, Integer, Boolean, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, Boolean, Integer, Boolean, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SettingsMusic.SETTINGS_MUSIC.GUILD_ID;
    }

    @Override
    public Field<Long> field2() {
        return SettingsMusic.SETTINGS_MUSIC.DJ_ROLE_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return SettingsMusic.SETTINGS_MUSIC.SEGMENT_SKIPPING_ENABLED;
    }

    @Override
    public Field<Integer> field4() {
        return SettingsMusic.SETTINGS_MUSIC.DEFAULT_VOLUME;
    }

    @Override
    public Field<Boolean> field5() {
        return SettingsMusic.SETTINGS_MUSIC.FAIR_QUEUE_ENABLED;
    }

    @Override
    public Field<Integer> field6() {
        return SettingsMusic.SETTINGS_MUSIC.FAIR_QUEUE_THRESHOLD;
    }

    @Override
    public Long component1() {
        return getGuildId();
    }

    @Override
    public Long component2() {
        return getDjRoleId();
    }

    @Override
    public Boolean component3() {
        return getSegmentSkippingEnabled();
    }

    @Override
    public Integer component4() {
        return getDefaultVolume();
    }

    @Override
    public Boolean component5() {
        return getFairQueueEnabled();
    }

    @Override
    public Integer component6() {
        return getFairQueueThreshold();
    }

    @Override
    public Long value1() {
        return getGuildId();
    }

    @Override
    public Long value2() {
        return getDjRoleId();
    }

    @Override
    public Boolean value3() {
        return getSegmentSkippingEnabled();
    }

    @Override
    public Integer value4() {
        return getDefaultVolume();
    }

    @Override
    public Boolean value5() {
        return getFairQueueEnabled();
    }

    @Override
    public Integer value6() {
        return getFairQueueThreshold();
    }

    @Override
    public SettingsMusicRecord value1(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public SettingsMusicRecord value2(Long value) {
        setDjRoleId(value);
        return this;
    }

    @Override
    public SettingsMusicRecord value3(Boolean value) {
        setSegmentSkippingEnabled(value);
        return this;
    }

    @Override
    public SettingsMusicRecord value4(Integer value) {
        setDefaultVolume(value);
        return this;
    }

    @Override
    public SettingsMusicRecord value5(Boolean value) {
        setFairQueueEnabled(value);
        return this;
    }

    @Override
    public SettingsMusicRecord value6(Integer value) {
        setFairQueueThreshold(value);
        return this;
    }

    @Override
    public SettingsMusicRecord values(Long value1, Long value2, Boolean value3, Integer value4, Boolean value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SettingsMusicRecord
     */
    public SettingsMusicRecord() {
        super(SettingsMusic.SETTINGS_MUSIC);
    }

    /**
     * Create a detached, initialised SettingsMusicRecord
     */
    public SettingsMusicRecord(Long guildId, Long djRoleId, Boolean segmentSkippingEnabled, Integer defaultVolume, Boolean fairQueueEnabled, Integer fairQueueThreshold) {
        super(SettingsMusic.SETTINGS_MUSIC);

        setGuildId(guildId);
        setDjRoleId(djRoleId);
        setSegmentSkippingEnabled(segmentSkippingEnabled);
        setDefaultVolume(defaultVolume);
        setFairQueueEnabled(fairQueueEnabled);
        setFairQueueThreshold(fairQueueThreshold);
    }
}
