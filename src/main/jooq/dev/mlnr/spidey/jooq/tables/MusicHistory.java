/*
 * This file is generated by jOOQ.
 */
package dev.mlnr.spidey.jooq.tables;


import dev.mlnr.spidey.jooq.Public;
import dev.mlnr.spidey.jooq.tables.records.MusicHistoryRecord;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MusicHistory extends TableImpl<MusicHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.music_history</code>
     */
    public static final MusicHistory MUSIC_HISTORY = new MusicHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicHistoryRecord> getRecordType() {
        return MusicHistoryRecord.class;
    }

    /**
     * The column <code>public.music_history.entry_time</code>.
     */
    public final TableField<MusicHistoryRecord, OffsetDateTime> ENTRY_TIME = createField(DSL.name("entry_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.music_history.query</code>.
     */
    public final TableField<MusicHistoryRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.music_history.user_id</code>.
     */
    public final TableField<MusicHistoryRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.music_history.type</code>.
     */
    public final TableField<MusicHistoryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    private MusicHistory(Name alias, Table<MusicHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MusicHistory(Name alias, Table<MusicHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.music_history</code> table reference
     */
    public MusicHistory(String alias) {
        this(DSL.name(alias), MUSIC_HISTORY);
    }

    /**
     * Create an aliased <code>public.music_history</code> table reference
     */
    public MusicHistory(Name alias) {
        this(alias, MUSIC_HISTORY);
    }

    /**
     * Create a <code>public.music_history</code> table reference
     */
    public MusicHistory() {
        this(DSL.name("music_history"), null);
    }

    public <O extends Record> MusicHistory(Table<O> child, ForeignKey<O, MusicHistoryRecord> key) {
        super(child, key, MUSIC_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public MusicHistory as(String alias) {
        return new MusicHistory(DSL.name(alias), this);
    }

    @Override
    public MusicHistory as(Name alias) {
        return new MusicHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MusicHistory rename(String name) {
        return new MusicHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MusicHistory rename(Name name) {
        return new MusicHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<OffsetDateTime, String, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
